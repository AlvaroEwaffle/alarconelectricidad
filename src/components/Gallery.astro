---
export interface Props {
  images: string[];
  title?: string;
  description?: string;
}

const { images, title = "Galer√≠a de Trabajos", description = "Algunos de nuestros proyectos m√°s destacados" } = Astro.props;
---

<section class="py-20 bg-white">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center mb-16">
      <h2 class="text-4xl md:text-5xl font-bold text-main mb-6">{title}</h2>
      <p class="text-xl text-main/80 max-w-3xl mx-auto">{description}</p>
    </div>

    <!-- Gallery Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
      {images.map((image, index) => (
        <div class="group relative overflow-hidden rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-2 cursor-pointer" 
             data-gallery-item={index}>
          <img 
            src={image} 
            alt={`Trabajo el√©ctrico ${index + 1}`}
            class="w-full h-64 object-cover group-hover:scale-110 transition-transform duration-500"
            loading="lazy"
          />
          <div class="absolute inset-0 bg-gradient-to-t from-main/80 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300">
            <div class="absolute bottom-4 left-4 right-4 text-white">
              <h3 class="font-semibold text-lg mb-1">Proyecto {index + 1}</h3>
              <p class="text-sm text-white/90">Instalaci√≥n el√©ctrica profesional</p>
            </div>
          </div>
          <!-- Zoom Icon -->
          <div class="absolute top-4 right-4 w-10 h-10 bg-white/90 rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300">
            <svg class="w-5 h-5 text-main" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7"></path>
            </svg>
          </div>
        </div>
      ))}
    </div>

    <!-- CTA Section -->
    <div class="text-center mt-16">
      <p class="text-lg text-main/80 mb-6">¬øTe gustar√≠a ver m√°s de nuestros trabajos?</p>
      <a href="https://wa.me/56937418142" target="_blank" 
         class="inline-block bg-hover text-white px-8 py-4 rounded-xl text-lg font-semibold hover:bg-red-600 transition-all duration-300 transform hover:scale-105 shadow-lg">
        üì± Ver m√°s proyectos en WhatsApp
      </a>
    </div>
  </div>
</section>

<!-- Lightbox Modal -->
<div id="lightbox" class="fixed inset-0 bg-black/90 z-50 hidden items-center justify-center p-4">
  <div class="relative max-w-4xl max-h-full">
    <!-- Close Button -->
    <button id="close-lightbox" class="absolute top-4 right-4 z-10 w-10 h-10 bg-white/90 rounded-full flex items-center justify-center hover:bg-white transition-colors">
      <svg class="w-6 h-6 text-main" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
    
    <!-- Navigation Buttons -->
    <button id="prev-image" class="absolute left-4 top-1/2 transform -translate-y-1/2 z-10 w-12 h-12 bg-white/90 rounded-full flex items-center justify-center hover:bg-white transition-colors">
      <svg class="w-6 h-6 text-main" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
      </svg>
    </button>
    
    <button id="next-image" class="absolute right-4 top-1/2 transform -translate-y-1/2 z-10 w-12 h-12 bg-white/90 rounded-full flex items-center justify-center hover:bg-white transition-colors">
      <svg class="w-6 h-6 text-main" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
      </svg>
    </button>
    
    <!-- Image Container -->
    <div class="relative">
      <img id="lightbox-image" src="" alt="" class="max-w-full max-h-[80vh] object-contain rounded-lg">
      <div class="absolute bottom-4 left-4 right-4 text-white text-center">
        <p id="lightbox-caption" class="text-lg font-semibold"></p>
        <p id="lightbox-counter" class="text-sm text-white/80"></p>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const galleryItems = document.querySelectorAll('[data-gallery-item]');
    const lightbox = document.getElementById('lightbox');
    const lightboxImage = document.getElementById('lightbox-image');
    const lightboxCaption = document.getElementById('lightbox-caption');
    const lightboxCounter = document.getElementById('lightbox-counter');
    const closeBtn = document.getElementById('close-lightbox');
    const prevBtn = document.getElementById('prev-image');
    const nextBtn = document.getElementById('next-image');
    
    let currentIndex = 0;
    const images = Array.from(galleryItems).map(item => {
      const img = item.querySelector('img');
      return {
        src: img.src,
        alt: img.alt
      };
    });

    // Open lightbox
    galleryItems.forEach((item, index) => {
      item.addEventListener('click', () => {
        currentIndex = index;
        openLightbox();
      });
    });

    // Close lightbox
    closeBtn.addEventListener('click', closeLightbox);
    lightbox.addEventListener('click', (e) => {
      if (e.target === lightbox) closeLightbox();
    });

    // Navigation
    prevBtn.addEventListener('click', () => {
      currentIndex = (currentIndex - 1 + images.length) % images.length;
      updateLightboxImage();
    });

    nextBtn.addEventListener('click', () => {
      currentIndex = (currentIndex + 1) % images.length;
      updateLightboxImage();
    });

    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (!lightbox.classList.contains('hidden')) {
        if (e.key === 'Escape') closeLightbox();
        if (e.key === 'ArrowLeft') prevBtn.click();
        if (e.key === 'ArrowRight') nextBtn.click();
      }
    });

    function openLightbox() {
      lightbox.classList.remove('hidden');
      lightbox.classList.add('flex');
      updateLightboxImage();
      document.body.style.overflow = 'hidden';
    }

    function closeLightbox() {
      lightbox.classList.add('hidden');
      lightbox.classList.remove('flex');
      document.body.style.overflow = 'auto';
    }

    function updateLightboxImage() {
      const currentImage = images[currentIndex];
      lightboxImage.src = currentImage.src;
      lightboxImage.alt = currentImage.alt;
      lightboxCaption.textContent = `Proyecto ${currentIndex + 1}`;
      lightboxCounter.textContent = `${currentIndex + 1} de ${images.length}`;
    }
  });
</script>
